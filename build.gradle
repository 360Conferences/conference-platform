buildscript {
  ext.buildConfig = [
      'compileSdk': 29,
      'minSdk'    : 24,
      'targetSdk' : 29,

      'version'   : [
          'major': 0,
          'minor': 0,
          'patch': 1,
          'build': 0,
      ],
  ]
  ext.buildConfig.version['name'] = "${buildConfig.version.major}.${buildConfig.version.minor}.${buildConfig.version.patch}"
  ext.buildConfig.version['fullName'] = "${buildConfig.version.name}.${buildConfig.version.build}"
  ext.buildConfig.version['code'] = buildConfig.version.major * 1000000 + buildConfig.version.minor * 10000 + buildConfig.version.patch * 100 + buildConfig.version.build

  ext.versions = [
      'kotlin'             : '1.3.61',
      'kotlinCoroutines'   : '1.3.3',
      'kotlinSerialization': '0.14.0',
      'ktor'               : '1.3.0',
      'logback'            : '1.2.1',
  ]

  ext.deps = [
      'kotlin' : [
          'stdlib'       : [
              'common': "org.jetbrains.kotlin:kotlin-stdlib-common:${versions.kotlin}",
              'jdk'   : "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
              'js'    : "org.jetbrains.kotlin:kotlin-stdlib-js:${versions.kotlin}",
          ],
          'test'         : [
              'common'     : "org.jetbrains.kotlin:kotlin-test-common:${versions.kotlin}",
              'annotations': "org.jetbrains.kotlin:kotlin-test-annotations-common:${versions.kotlin}",
              'jdk'        : "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}",
              'js'         : "org.jetbrains.kotlin:kotlin-test-js:${versions.kotlin}",
          ],
          'coroutines'   : [
              'common' : "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${versions.kotlinCoroutines}",
              'jdk'    : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}",
              'jdk8'   : "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${versions.kotlinCoroutines}",
              'js'     : "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:${versions.kotlinCoroutines}",
              'native' : "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${versions.kotlinCoroutines}",
              'android': "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinCoroutines}",
          ],
          'serialization': [
              'common': "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:${versions.kotlinSerialization}",
              'jdk'   : "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${versions.kotlinSerialization}",
              'js'    : "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:${versions.kotlinSerialization}",
              'native': "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:${versions.kotlinSerialization}",
          ],
          'html': "org.jetbrains.kotlinx:kotlinx-html-js:0.6.11",
      ],
      'timber' : [
          'common' : 'com.jakewharton.timber:timber-common:5.0.0-SNAPSHOT',
          'jdk'    : 'com.jakewharton.timber:timber-jdk:5.0.0-SNAPSHOT',
          'js'     : 'com.jakewharton.timber:timber-js:5.0.0-SNAPSHOT',
          'native' : 'com.jakewharton.timber:timber-native:5.0.0-SNAPSHOT',
          'android': 'com.jakewharton.timber:timber-android:5.0.0-SNAPSHOT',
      ],
      'junit'  : 'junit:junit:4.13-rc-2',
      'ktor'   : [
          'core' : "io.ktor:ktor-server-core:${versions.ktor}",
          'test' : "io.ktor:ktor-server-tests:${versions.ktor}",
          'netty': "io.ktor:ktor-server-netty:${versions.ktor}",
      ],
      'logback': 'ch.qos.logback:logback-classic:1.2.3',
  ]

  repositories {
    mavenCentral()
    google()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    gradlePluginPortal()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:3.5.3'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    classpath "org.jetbrains.kotlin:kotlin-serialization:${versions.kotlin}"
    classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.45"
    classpath 'org.jlleitschuh.gradle:ktlint-gradle:9.1.0'
  }
}

allprojects {
  apply plugin: 'org.jlleitschuh.gradle.ktlint'

  repositories {
    mavenCentral()
    google()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    jcenter()
  }

  configurations.all {
    resolutionStrategy {
      eachDependency { details ->
        // Force all Kotlin stdlib artifacts to use the same version.
        if (details.requested.group == 'org.jetbrains.kotlin' && details.requested.name.startsWith('kotlin-stdlib')) {
          details.useVersion versions.kotlin
        }
      }
    }
  }

  // TODO remove once https://github.com/Kotlin/kotlin-frontend-plugin/issues/141 is fixed
  plugins.whenPluginAdded { plugin ->
    if (plugin.class.name == 'org.jetbrains.kotlin.gradle.frontend.FrontendPlugin') {
      def fixTask = tasks.register('webpack-config-fix') {
        def dir = file('webpack.config.d')
        it.outputs.dir(dir)
        it.doLast { dir.mkdir() }
      }
      afterEvaluate {
        tasks.named('webpack-config').configure {
          it.dependsOn(fixTask)
        }
      }
    }
  }

  plugins.withType(com.android.build.gradle.BasePlugin).configureEach { plugin ->
    plugin.extension.compileOptions {
      sourceCompatibility = JavaVersion.VERSION_1_8
      targetCompatibility = JavaVersion.VERSION_1_8
    }
  }

  tasks.withType(JavaCompile).configureEach { task ->
    task.sourceCompatibility = JavaVersion.VERSION_1_8
    task.targetCompatibility = JavaVersion.VERSION_1_8
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile).configureEach { task ->
    task.kotlinOptions {
      jvmTarget = "1.8"
    }
  }

  tasks.withType(Test) {
    testLogging {
      events "skipped", "failed", "passed"
    }
  }
}
